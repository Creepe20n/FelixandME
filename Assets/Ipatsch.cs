//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Ipatsch.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Ipatsch: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Ipatsch()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Ipatsch"",
    ""maps"": [
        {
            ""name"": ""Movememt"",
            ""id"": ""8387044b-1af9-40ea-b58e-fb07014859a9"",
            ""actions"": [
                {
                    ""name"": ""A D"",
                    ""type"": ""Value"",
                    ""id"": ""0400a56e-3fa8-47e8-bc94-543ab2dda7b0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""6d13c6ed-1bc2-4af6-b05e-20bce7309e39"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""103f92a0-b625-44fb-ab0d-9597c6cec41d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A D"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cf3147e3-cce0-4722-a5ac-ad6cb234fc0f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2eb9d84d-64d1-4aa6-a540-8265653209c6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""92eb31dc-5523-479a-acde-215d63a54312"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movememt
        m_Movememt = asset.FindActionMap("Movememt", throwIfNotFound: true);
        m_Movememt_AD = m_Movememt.FindAction("A D", throwIfNotFound: true);
        m_Movememt_Jump = m_Movememt.FindAction("Jump", throwIfNotFound: true);
    }

    ~@Ipatsch()
    {
        UnityEngine.Debug.Assert(!m_Movememt.enabled, "This will cause a leak and performance issues, Ipatsch.Movememt.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movememt
    private readonly InputActionMap m_Movememt;
    private List<IMovememtActions> m_MovememtActionsCallbackInterfaces = new List<IMovememtActions>();
    private readonly InputAction m_Movememt_AD;
    private readonly InputAction m_Movememt_Jump;
    public struct MovememtActions
    {
        private @Ipatsch m_Wrapper;
        public MovememtActions(@Ipatsch wrapper) { m_Wrapper = wrapper; }
        public InputAction @AD => m_Wrapper.m_Movememt_AD;
        public InputAction @Jump => m_Wrapper.m_Movememt_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Movememt; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovememtActions set) { return set.Get(); }
        public void AddCallbacks(IMovememtActions instance)
        {
            if (instance == null || m_Wrapper.m_MovememtActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovememtActionsCallbackInterfaces.Add(instance);
            @AD.started += instance.OnAD;
            @AD.performed += instance.OnAD;
            @AD.canceled += instance.OnAD;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IMovememtActions instance)
        {
            @AD.started -= instance.OnAD;
            @AD.performed -= instance.OnAD;
            @AD.canceled -= instance.OnAD;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IMovememtActions instance)
        {
            if (m_Wrapper.m_MovememtActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovememtActions instance)
        {
            foreach (var item in m_Wrapper.m_MovememtActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovememtActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovememtActions @Movememt => new MovememtActions(this);
    public interface IMovememtActions
    {
        void OnAD(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
